service: notes-api
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'} #takes the stage value from the command line with the --stage flag 
  region: us-east-1

plugins:
  - serverless-iam-roles-per-function 


functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool #gets the user pool id
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient # gets the user pool web client id 

  createNode:
    handler: handler.createNode # calls the specific lambda function
    environment:
      NODES_TABLE_NAME: !Ref nodesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt nodesTable.Arn # !GetAtt is an instrinic cloudFormation function that returns the ARN of the db table
    events:
      - http: # creating a connection to the API gateway in aws
          method: post
          path: notes
          authorizer: authorizer

  updateNode:
    handler: handler.updateNode # calls the specific lambda function
    environment:
      NODES_TABLE_NAME: !Ref nodesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt nodesTable.Arn # !GetAtt is an instrinic cloudFormation function that returns the ARN of the db table
    events:
      - http: # creating a connection to the API gateway in aws
          method: put
          path: notes/{id}
          authorizer: authorizer

  deleteNode:
    handler: handler.deleteNode
    environment:
      NODES_TABLE_NAME: !Ref nodesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt nodesTable.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer

  getAllNodes:
    handler: handler.getAllNodes # calls the specific lambda function
    environment:
      NODES_TABLE_NAME: !Ref nodesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 #reuses http request after acknowledgement
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt nodesTable.Arn
    events:
      - http: # creating a connection to the API gateway in aws
          method: get
          path: notes
          authorizer: # creating a cognito user pool authorizer for aws api gateway
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt cognitoUserPool.Arn 
            # ${ssm:/nodes/${self:provider.stage}/userpoolArn} # Managed in system manager parameter store

resources:
  Resources: ${file(resources.yml)}

    # you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
